// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockPipelineTemplateListerMockGet  sync.RWMutex
	lockPipelineTemplateListerMockList sync.RWMutex
)

// Ensure, that PipelineTemplateListerMock does implement PipelineTemplateLister.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineTemplateLister = &PipelineTemplateListerMock{}

// PipelineTemplateListerMock is a mock implementation of PipelineTemplateLister.
//
//     func TestSomethingThatUsesPipelineTemplateLister(t *testing.T) {
//
//         // make and configure a mocked PipelineTemplateLister
//         mockedPipelineTemplateLister := &PipelineTemplateListerMock{
//             GetFunc: func(namespace string, name string) (*v3.PipelineTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.PipelineTemplate, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedPipelineTemplateLister in code that requires PipelineTemplateLister
//         // and then make assertions.
//
//     }
type PipelineTemplateListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.PipelineTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.PipelineTemplate, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *PipelineTemplateListerMock) Get(namespace string, name string) (*v3.PipelineTemplate, error) {
	if mock.GetFunc == nil {
		panic("PipelineTemplateListerMock.GetFunc: method is nil but PipelineTemplateLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPipelineTemplateListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPipelineTemplateListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPipelineTemplateLister.GetCalls())
func (mock *PipelineTemplateListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPipelineTemplateListerMockGet.RLock()
	calls = mock.calls.Get
	lockPipelineTemplateListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PipelineTemplateListerMock) List(namespace string, selector labels.Selector) ([]*v3.PipelineTemplate, error) {
	if mock.ListFunc == nil {
		panic("PipelineTemplateListerMock.ListFunc: method is nil but PipelineTemplateLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockPipelineTemplateListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPipelineTemplateListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPipelineTemplateLister.ListCalls())
func (mock *PipelineTemplateListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockPipelineTemplateListerMockList.RLock()
	calls = mock.calls.List
	lockPipelineTemplateListerMockList.RUnlock()
	return calls
}

var (
	lockPipelineTemplateControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockPipelineTemplateControllerMockAddClusterScopedHandler        sync.RWMutex
	lockPipelineTemplateControllerMockAddFeatureHandler              sync.RWMutex
	lockPipelineTemplateControllerMockAddHandler                     sync.RWMutex
	lockPipelineTemplateControllerMockEnqueue                        sync.RWMutex
	lockPipelineTemplateControllerMockGeneric                        sync.RWMutex
	lockPipelineTemplateControllerMockInformer                       sync.RWMutex
	lockPipelineTemplateControllerMockLister                         sync.RWMutex
	lockPipelineTemplateControllerMockStart                          sync.RWMutex
	lockPipelineTemplateControllerMockSync                           sync.RWMutex
)

// Ensure, that PipelineTemplateControllerMock does implement PipelineTemplateController.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineTemplateController = &PipelineTemplateControllerMock{}

// PipelineTemplateControllerMock is a mock implementation of PipelineTemplateController.
//
//     func TestSomethingThatUsesPipelineTemplateController(t *testing.T) {
//
//         // make and configure a mocked PipelineTemplateController
//         mockedPipelineTemplateController := &PipelineTemplateControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.PipelineTemplateLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedPipelineTemplateController in code that requires PipelineTemplateController
//         // and then make assertions.
//
//     }
type PipelineTemplateControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.PipelineTemplateHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.PipelineTemplateLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.PipelineTemplateHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.PipelineTemplateHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineTemplateHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.PipelineTemplateHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *PipelineTemplateControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("PipelineTemplateControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but PipelineTemplateController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.PipelineTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockPipelineTemplateControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockPipelineTemplateControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedPipelineTemplateController.AddClusterScopedFeatureHandlerCalls())
func (mock *PipelineTemplateControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockPipelineTemplateControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PipelineTemplateControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.PipelineTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PipelineTemplateControllerMock.AddClusterScopedHandlerFunc: method is nil but PipelineTemplateController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.PipelineTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockPipelineTemplateControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPipelineTemplateControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPipelineTemplateController.AddClusterScopedHandlerCalls())
func (mock *PipelineTemplateControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPipelineTemplateControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PipelineTemplateControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PipelineTemplateControllerMock.AddFeatureHandlerFunc: method is nil but PipelineTemplateController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.PipelineTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockPipelineTemplateControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPipelineTemplateControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPipelineTemplateController.AddFeatureHandlerCalls())
func (mock *PipelineTemplateControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPipelineTemplateControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PipelineTemplateControllerMock) AddHandler(ctx context.Context, name string, handler v3.PipelineTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PipelineTemplateControllerMock.AddHandlerFunc: method is nil but PipelineTemplateController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.PipelineTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockPipelineTemplateControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPipelineTemplateControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPipelineTemplateController.AddHandlerCalls())
func (mock *PipelineTemplateControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPipelineTemplateControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *PipelineTemplateControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("PipelineTemplateControllerMock.EnqueueFunc: method is nil but PipelineTemplateController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPipelineTemplateControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockPipelineTemplateControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedPipelineTemplateController.EnqueueCalls())
func (mock *PipelineTemplateControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPipelineTemplateControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockPipelineTemplateControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *PipelineTemplateControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("PipelineTemplateControllerMock.GenericFunc: method is nil but PipelineTemplateController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineTemplateControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockPipelineTemplateControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedPipelineTemplateController.GenericCalls())
func (mock *PipelineTemplateControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineTemplateControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockPipelineTemplateControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *PipelineTemplateControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("PipelineTemplateControllerMock.InformerFunc: method is nil but PipelineTemplateController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineTemplateControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockPipelineTemplateControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedPipelineTemplateController.InformerCalls())
func (mock *PipelineTemplateControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineTemplateControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockPipelineTemplateControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *PipelineTemplateControllerMock) Lister() v3.PipelineTemplateLister {
	if mock.ListerFunc == nil {
		panic("PipelineTemplateControllerMock.ListerFunc: method is nil but PipelineTemplateController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineTemplateControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockPipelineTemplateControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedPipelineTemplateController.ListerCalls())
func (mock *PipelineTemplateControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineTemplateControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockPipelineTemplateControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *PipelineTemplateControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("PipelineTemplateControllerMock.StartFunc: method is nil but PipelineTemplateController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockPipelineTemplateControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockPipelineTemplateControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedPipelineTemplateController.StartCalls())
func (mock *PipelineTemplateControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockPipelineTemplateControllerMockStart.RLock()
	calls = mock.calls.Start
	lockPipelineTemplateControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *PipelineTemplateControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("PipelineTemplateControllerMock.SyncFunc: method is nil but PipelineTemplateController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockPipelineTemplateControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockPipelineTemplateControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedPipelineTemplateController.SyncCalls())
func (mock *PipelineTemplateControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockPipelineTemplateControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockPipelineTemplateControllerMockSync.RUnlock()
	return calls
}

var (
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockPipelineTemplateInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockPipelineTemplateInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockPipelineTemplateInterfaceMockAddFeatureHandler                sync.RWMutex
	lockPipelineTemplateInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockPipelineTemplateInterfaceMockAddHandler                       sync.RWMutex
	lockPipelineTemplateInterfaceMockAddLifecycle                     sync.RWMutex
	lockPipelineTemplateInterfaceMockController                       sync.RWMutex
	lockPipelineTemplateInterfaceMockCreate                           sync.RWMutex
	lockPipelineTemplateInterfaceMockDelete                           sync.RWMutex
	lockPipelineTemplateInterfaceMockDeleteCollection                 sync.RWMutex
	lockPipelineTemplateInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockPipelineTemplateInterfaceMockGet                              sync.RWMutex
	lockPipelineTemplateInterfaceMockGetNamespaced                    sync.RWMutex
	lockPipelineTemplateInterfaceMockList                             sync.RWMutex
	lockPipelineTemplateInterfaceMockObjectClient                     sync.RWMutex
	lockPipelineTemplateInterfaceMockUpdate                           sync.RWMutex
	lockPipelineTemplateInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that PipelineTemplateInterfaceMock does implement PipelineTemplateInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineTemplateInterface = &PipelineTemplateInterfaceMock{}

// PipelineTemplateInterfaceMock is a mock implementation of PipelineTemplateInterface.
//
//     func TestSomethingThatUsesPipelineTemplateInterface(t *testing.T) {
//
//         // make and configure a mocked PipelineTemplateInterface
//         mockedPipelineTemplateInterface := &PipelineTemplateInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.PipelineTemplateLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.PipelineTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.PipelineTemplateLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.PipelineTemplateController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.PipelineTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.PipelineTemplate, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.PipelineTemplateList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedPipelineTemplateInterface in code that requires PipelineTemplateInterface
//         // and then make assertions.
//
//     }
type PipelineTemplateInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.PipelineTemplateLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.PipelineTemplateHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.PipelineTemplateLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.PipelineTemplateController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.PipelineTemplate, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.PipelineTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.PipelineTemplateList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.PipelineTemplateHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineTemplateLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.PipelineTemplateHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineTemplateLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineTemplateHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineTemplateLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineTemplateHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineTemplateLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.PipelineTemplate
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.PipelineTemplate
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but PipelineTemplateInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.PipelineTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but PipelineTemplateInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineTemplateLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.PipelineTemplateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineTemplateLifecycle
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockPipelineTemplateInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.PipelineTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddClusterScopedHandlerFunc: method is nil but PipelineTemplateInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.PipelineTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPipelineTemplateInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddClusterScopedHandlerCalls())
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPipelineTemplateInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineTemplateLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but PipelineTemplateInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineTemplateLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockPipelineTemplateInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddClusterScopedLifecycleCalls())
func (mock *PipelineTemplateInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.PipelineTemplateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineTemplateLifecycle
	}
	lockPipelineTemplateInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockPipelineTemplateInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PipelineTemplateInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.PipelineTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddFeatureHandlerFunc: method is nil but PipelineTemplateInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.PipelineTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockPipelineTemplateInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPipelineTemplateInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddFeatureHandlerCalls())
func (mock *PipelineTemplateInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPipelineTemplateInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *PipelineTemplateInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.PipelineTemplateLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddFeatureLifecycleFunc: method is nil but PipelineTemplateInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.PipelineTemplateLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPipelineTemplateInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockPipelineTemplateInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddFeatureLifecycleCalls())
func (mock *PipelineTemplateInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.PipelineTemplateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.PipelineTemplateLifecycle
	}
	lockPipelineTemplateInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockPipelineTemplateInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PipelineTemplateInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.PipelineTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddHandlerFunc: method is nil but PipelineTemplateInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.PipelineTemplateHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockPipelineTemplateInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPipelineTemplateInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddHandlerCalls())
func (mock *PipelineTemplateInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.PipelineTemplateHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.PipelineTemplateHandlerFunc
	}
	lockPipelineTemplateInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPipelineTemplateInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *PipelineTemplateInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.PipelineTemplateLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("PipelineTemplateInterfaceMock.AddLifecycleFunc: method is nil but PipelineTemplateInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineTemplateLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPipelineTemplateInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockPipelineTemplateInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedPipelineTemplateInterface.AddLifecycleCalls())
func (mock *PipelineTemplateInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.PipelineTemplateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineTemplateLifecycle
	}
	lockPipelineTemplateInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockPipelineTemplateInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *PipelineTemplateInterfaceMock) Controller() v3.PipelineTemplateController {
	if mock.ControllerFunc == nil {
		panic("PipelineTemplateInterfaceMock.ControllerFunc: method is nil but PipelineTemplateInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineTemplateInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockPipelineTemplateInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedPipelineTemplateInterface.ControllerCalls())
func (mock *PipelineTemplateInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineTemplateInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockPipelineTemplateInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *PipelineTemplateInterfaceMock) Create(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error) {
	if mock.CreateFunc == nil {
		panic("PipelineTemplateInterfaceMock.CreateFunc: method is nil but PipelineTemplateInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.PipelineTemplate
	}{
		In1: in1,
	}
	lockPipelineTemplateInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPipelineTemplateInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPipelineTemplateInterface.CreateCalls())
func (mock *PipelineTemplateInterfaceMock) CreateCalls() []struct {
	In1 *v3.PipelineTemplate
} {
	var calls []struct {
		In1 *v3.PipelineTemplate
	}
	lockPipelineTemplateInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockPipelineTemplateInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *PipelineTemplateInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("PipelineTemplateInterfaceMock.DeleteFunc: method is nil but PipelineTemplateInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockPipelineTemplateInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockPipelineTemplateInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPipelineTemplateInterface.DeleteCalls())
func (mock *PipelineTemplateInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockPipelineTemplateInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockPipelineTemplateInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *PipelineTemplateInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("PipelineTemplateInterfaceMock.DeleteCollectionFunc: method is nil but PipelineTemplateInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockPipelineTemplateInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockPipelineTemplateInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedPipelineTemplateInterface.DeleteCollectionCalls())
func (mock *PipelineTemplateInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockPipelineTemplateInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockPipelineTemplateInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *PipelineTemplateInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("PipelineTemplateInterfaceMock.DeleteNamespacedFunc: method is nil but PipelineTemplateInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPipelineTemplateInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockPipelineTemplateInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedPipelineTemplateInterface.DeleteNamespacedCalls())
func (mock *PipelineTemplateInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockPipelineTemplateInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockPipelineTemplateInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PipelineTemplateInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.PipelineTemplate, error) {
	if mock.GetFunc == nil {
		panic("PipelineTemplateInterfaceMock.GetFunc: method is nil but PipelineTemplateInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockPipelineTemplateInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPipelineTemplateInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPipelineTemplateInterface.GetCalls())
func (mock *PipelineTemplateInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockPipelineTemplateInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockPipelineTemplateInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *PipelineTemplateInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.PipelineTemplate, error) {
	if mock.GetNamespacedFunc == nil {
		panic("PipelineTemplateInterfaceMock.GetNamespacedFunc: method is nil but PipelineTemplateInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockPipelineTemplateInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockPipelineTemplateInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedPipelineTemplateInterface.GetNamespacedCalls())
func (mock *PipelineTemplateInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockPipelineTemplateInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockPipelineTemplateInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PipelineTemplateInterfaceMock) List(opts v1.ListOptions) (*v3.PipelineTemplateList, error) {
	if mock.ListFunc == nil {
		panic("PipelineTemplateInterfaceMock.ListFunc: method is nil but PipelineTemplateInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockPipelineTemplateInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPipelineTemplateInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPipelineTemplateInterface.ListCalls())
func (mock *PipelineTemplateInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockPipelineTemplateInterfaceMockList.RLock()
	calls = mock.calls.List
	lockPipelineTemplateInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *PipelineTemplateInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("PipelineTemplateInterfaceMock.ObjectClientFunc: method is nil but PipelineTemplateInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineTemplateInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockPipelineTemplateInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedPipelineTemplateInterface.ObjectClientCalls())
func (mock *PipelineTemplateInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineTemplateInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockPipelineTemplateInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *PipelineTemplateInterfaceMock) Update(in1 *v3.PipelineTemplate) (*v3.PipelineTemplate, error) {
	if mock.UpdateFunc == nil {
		panic("PipelineTemplateInterfaceMock.UpdateFunc: method is nil but PipelineTemplateInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.PipelineTemplate
	}{
		In1: in1,
	}
	lockPipelineTemplateInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockPipelineTemplateInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedPipelineTemplateInterface.UpdateCalls())
func (mock *PipelineTemplateInterfaceMock) UpdateCalls() []struct {
	In1 *v3.PipelineTemplate
} {
	var calls []struct {
		In1 *v3.PipelineTemplate
	}
	lockPipelineTemplateInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockPipelineTemplateInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *PipelineTemplateInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("PipelineTemplateInterfaceMock.WatchFunc: method is nil but PipelineTemplateInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockPipelineTemplateInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockPipelineTemplateInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedPipelineTemplateInterface.WatchCalls())
func (mock *PipelineTemplateInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockPipelineTemplateInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockPipelineTemplateInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockPipelineTemplatesGetterMockPipelineTemplates sync.RWMutex
)

// Ensure, that PipelineTemplatesGetterMock does implement PipelineTemplatesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineTemplatesGetter = &PipelineTemplatesGetterMock{}

// PipelineTemplatesGetterMock is a mock implementation of PipelineTemplatesGetter.
//
//     func TestSomethingThatUsesPipelineTemplatesGetter(t *testing.T) {
//
//         // make and configure a mocked PipelineTemplatesGetter
//         mockedPipelineTemplatesGetter := &PipelineTemplatesGetterMock{
//             PipelineTemplatesFunc: func(namespace string) v3.PipelineTemplateInterface {
// 	               panic("mock out the PipelineTemplates method")
//             },
//         }
//
//         // use mockedPipelineTemplatesGetter in code that requires PipelineTemplatesGetter
//         // and then make assertions.
//
//     }
type PipelineTemplatesGetterMock struct {
	// PipelineTemplatesFunc mocks the PipelineTemplates method.
	PipelineTemplatesFunc func(namespace string) v3.PipelineTemplateInterface

	// calls tracks calls to the methods.
	calls struct {
		// PipelineTemplates holds details about calls to the PipelineTemplates method.
		PipelineTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// PipelineTemplates calls PipelineTemplatesFunc.
func (mock *PipelineTemplatesGetterMock) PipelineTemplates(namespace string) v3.PipelineTemplateInterface {
	if mock.PipelineTemplatesFunc == nil {
		panic("PipelineTemplatesGetterMock.PipelineTemplatesFunc: method is nil but PipelineTemplatesGetter.PipelineTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockPipelineTemplatesGetterMockPipelineTemplates.Lock()
	mock.calls.PipelineTemplates = append(mock.calls.PipelineTemplates, callInfo)
	lockPipelineTemplatesGetterMockPipelineTemplates.Unlock()
	return mock.PipelineTemplatesFunc(namespace)
}

// PipelineTemplatesCalls gets all the calls that were made to PipelineTemplates.
// Check the length with:
//     len(mockedPipelineTemplatesGetter.PipelineTemplatesCalls())
func (mock *PipelineTemplatesGetterMock) PipelineTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockPipelineTemplatesGetterMockPipelineTemplates.RLock()
	calls = mock.calls.PipelineTemplates
	lockPipelineTemplatesGetterMockPipelineTemplates.RUnlock()
	return calls
}

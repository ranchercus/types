// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/cluster.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockHarborRepositoryListerMockGet  sync.RWMutex
	lockHarborRepositoryListerMockList sync.RWMutex
)

// Ensure, that HarborRepositoryListerMock does implement HarborRepositoryLister.
// If this is not the case, regenerate this file with moq.
var _ v3.HarborRepositoryLister = &HarborRepositoryListerMock{}

// HarborRepositoryListerMock is a mock implementation of HarborRepositoryLister.
//
//     func TestSomethingThatUsesHarborRepositoryLister(t *testing.T) {
//
//         // make and configure a mocked HarborRepositoryLister
//         mockedHarborRepositoryLister := &HarborRepositoryListerMock{
//             GetFunc: func(namespace string, name string) (*v3.HarborRepository, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.HarborRepository, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedHarborRepositoryLister in code that requires HarborRepositoryLister
//         // and then make assertions.
//
//     }
type HarborRepositoryListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.HarborRepository, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.HarborRepository, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *HarborRepositoryListerMock) Get(namespace string, name string) (*v3.HarborRepository, error) {
	if mock.GetFunc == nil {
		panic("HarborRepositoryListerMock.GetFunc: method is nil but HarborRepositoryLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockHarborRepositoryListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHarborRepositoryListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHarborRepositoryLister.GetCalls())
func (mock *HarborRepositoryListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockHarborRepositoryListerMockGet.RLock()
	calls = mock.calls.Get
	lockHarborRepositoryListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *HarborRepositoryListerMock) List(namespace string, selector labels.Selector) ([]*v3.HarborRepository, error) {
	if mock.ListFunc == nil {
		panic("HarborRepositoryListerMock.ListFunc: method is nil but HarborRepositoryLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockHarborRepositoryListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockHarborRepositoryListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedHarborRepositoryLister.ListCalls())
func (mock *HarborRepositoryListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockHarborRepositoryListerMockList.RLock()
	calls = mock.calls.List
	lockHarborRepositoryListerMockList.RUnlock()
	return calls
}

var (
	lockHarborRepositoryControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockHarborRepositoryControllerMockAddClusterScopedHandler        sync.RWMutex
	lockHarborRepositoryControllerMockAddFeatureHandler              sync.RWMutex
	lockHarborRepositoryControllerMockAddHandler                     sync.RWMutex
	lockHarborRepositoryControllerMockEnqueue                        sync.RWMutex
	lockHarborRepositoryControllerMockGeneric                        sync.RWMutex
	lockHarborRepositoryControllerMockInformer                       sync.RWMutex
	lockHarborRepositoryControllerMockLister                         sync.RWMutex
	lockHarborRepositoryControllerMockStart                          sync.RWMutex
	lockHarborRepositoryControllerMockSync                           sync.RWMutex
)

// Ensure, that HarborRepositoryControllerMock does implement HarborRepositoryController.
// If this is not the case, regenerate this file with moq.
var _ v3.HarborRepositoryController = &HarborRepositoryControllerMock{}

// HarborRepositoryControllerMock is a mock implementation of HarborRepositoryController.
//
//     func TestSomethingThatUsesHarborRepositoryController(t *testing.T) {
//
//         // make and configure a mocked HarborRepositoryController
//         mockedHarborRepositoryController := &HarborRepositoryControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.HarborRepositoryLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedHarborRepositoryController in code that requires HarborRepositoryController
//         // and then make assertions.
//
//     }
type HarborRepositoryControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.HarborRepositoryHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.HarborRepositoryLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.HarborRepositoryHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.HarborRepositoryHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.HarborRepositoryHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.HarborRepositoryHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *HarborRepositoryControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("HarborRepositoryControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but HarborRepositoryController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.HarborRepositoryHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockHarborRepositoryControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockHarborRepositoryControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedHarborRepositoryController.AddClusterScopedFeatureHandlerCalls())
func (mock *HarborRepositoryControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockHarborRepositoryControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *HarborRepositoryControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.HarborRepositoryHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("HarborRepositoryControllerMock.AddClusterScopedHandlerFunc: method is nil but HarborRepositoryController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.HarborRepositoryHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockHarborRepositoryControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockHarborRepositoryControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedHarborRepositoryController.AddClusterScopedHandlerCalls())
func (mock *HarborRepositoryControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockHarborRepositoryControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *HarborRepositoryControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("HarborRepositoryControllerMock.AddFeatureHandlerFunc: method is nil but HarborRepositoryController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.HarborRepositoryHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockHarborRepositoryControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockHarborRepositoryControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedHarborRepositoryController.AddFeatureHandlerCalls())
func (mock *HarborRepositoryControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockHarborRepositoryControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *HarborRepositoryControllerMock) AddHandler(ctx context.Context, name string, handler v3.HarborRepositoryHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("HarborRepositoryControllerMock.AddHandlerFunc: method is nil but HarborRepositoryController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.HarborRepositoryHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockHarborRepositoryControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockHarborRepositoryControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedHarborRepositoryController.AddHandlerCalls())
func (mock *HarborRepositoryControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockHarborRepositoryControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *HarborRepositoryControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("HarborRepositoryControllerMock.EnqueueFunc: method is nil but HarborRepositoryController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockHarborRepositoryControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockHarborRepositoryControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedHarborRepositoryController.EnqueueCalls())
func (mock *HarborRepositoryControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockHarborRepositoryControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockHarborRepositoryControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *HarborRepositoryControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("HarborRepositoryControllerMock.GenericFunc: method is nil but HarborRepositoryController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockHarborRepositoryControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockHarborRepositoryControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedHarborRepositoryController.GenericCalls())
func (mock *HarborRepositoryControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockHarborRepositoryControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockHarborRepositoryControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *HarborRepositoryControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("HarborRepositoryControllerMock.InformerFunc: method is nil but HarborRepositoryController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockHarborRepositoryControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockHarborRepositoryControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedHarborRepositoryController.InformerCalls())
func (mock *HarborRepositoryControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockHarborRepositoryControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockHarborRepositoryControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *HarborRepositoryControllerMock) Lister() v3.HarborRepositoryLister {
	if mock.ListerFunc == nil {
		panic("HarborRepositoryControllerMock.ListerFunc: method is nil but HarborRepositoryController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockHarborRepositoryControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockHarborRepositoryControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedHarborRepositoryController.ListerCalls())
func (mock *HarborRepositoryControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockHarborRepositoryControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockHarborRepositoryControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *HarborRepositoryControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("HarborRepositoryControllerMock.StartFunc: method is nil but HarborRepositoryController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockHarborRepositoryControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockHarborRepositoryControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedHarborRepositoryController.StartCalls())
func (mock *HarborRepositoryControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockHarborRepositoryControllerMockStart.RLock()
	calls = mock.calls.Start
	lockHarborRepositoryControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *HarborRepositoryControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("HarborRepositoryControllerMock.SyncFunc: method is nil but HarborRepositoryController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockHarborRepositoryControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockHarborRepositoryControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedHarborRepositoryController.SyncCalls())
func (mock *HarborRepositoryControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockHarborRepositoryControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockHarborRepositoryControllerMockSync.RUnlock()
	return calls
}

var (
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockHarborRepositoryInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockHarborRepositoryInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockHarborRepositoryInterfaceMockAddFeatureHandler                sync.RWMutex
	lockHarborRepositoryInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockHarborRepositoryInterfaceMockAddHandler                       sync.RWMutex
	lockHarborRepositoryInterfaceMockAddLifecycle                     sync.RWMutex
	lockHarborRepositoryInterfaceMockController                       sync.RWMutex
	lockHarborRepositoryInterfaceMockCreate                           sync.RWMutex
	lockHarborRepositoryInterfaceMockDelete                           sync.RWMutex
	lockHarborRepositoryInterfaceMockDeleteCollection                 sync.RWMutex
	lockHarborRepositoryInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockHarborRepositoryInterfaceMockGet                              sync.RWMutex
	lockHarborRepositoryInterfaceMockGetNamespaced                    sync.RWMutex
	lockHarborRepositoryInterfaceMockList                             sync.RWMutex
	lockHarborRepositoryInterfaceMockObjectClient                     sync.RWMutex
	lockHarborRepositoryInterfaceMockUpdate                           sync.RWMutex
	lockHarborRepositoryInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that HarborRepositoryInterfaceMock does implement HarborRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.HarborRepositoryInterface = &HarborRepositoryInterfaceMock{}

// HarborRepositoryInterfaceMock is a mock implementation of HarborRepositoryInterface.
//
//     func TestSomethingThatUsesHarborRepositoryInterface(t *testing.T) {
//
//         // make and configure a mocked HarborRepositoryInterface
//         mockedHarborRepositoryInterface := &HarborRepositoryInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.HarborRepositoryLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.HarborRepositoryHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.HarborRepositoryLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.HarborRepositoryController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.HarborRepository) (*v3.HarborRepository, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.HarborRepository, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.HarborRepository, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.HarborRepositoryList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.HarborRepository) (*v3.HarborRepository, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedHarborRepositoryInterface in code that requires HarborRepositoryInterface
//         // and then make assertions.
//
//     }
type HarborRepositoryInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.HarborRepositoryLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.HarborRepositoryHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.HarborRepositoryLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.HarborRepositoryController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.HarborRepository) (*v3.HarborRepository, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.HarborRepository, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.HarborRepository, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.HarborRepositoryList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.HarborRepository) (*v3.HarborRepository, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.HarborRepositoryHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.HarborRepositoryLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.HarborRepositoryHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.HarborRepositoryLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.HarborRepositoryHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.HarborRepositoryLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.HarborRepositoryHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.HarborRepositoryLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.HarborRepository
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.HarborRepository
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but HarborRepositoryInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.HarborRepositoryHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but HarborRepositoryInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.HarborRepositoryLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.HarborRepositoryLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.HarborRepositoryLifecycle
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockHarborRepositoryInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.HarborRepositoryHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddClusterScopedHandlerFunc: method is nil but HarborRepositoryInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.HarborRepositoryHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockHarborRepositoryInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddClusterScopedHandlerCalls())
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockHarborRepositoryInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.HarborRepositoryLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but HarborRepositoryInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.HarborRepositoryLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockHarborRepositoryInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddClusterScopedLifecycleCalls())
func (mock *HarborRepositoryInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.HarborRepositoryLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.HarborRepositoryLifecycle
	}
	lockHarborRepositoryInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockHarborRepositoryInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *HarborRepositoryInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.HarborRepositoryHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddFeatureHandlerFunc: method is nil but HarborRepositoryInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.HarborRepositoryHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockHarborRepositoryInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockHarborRepositoryInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddFeatureHandlerCalls())
func (mock *HarborRepositoryInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockHarborRepositoryInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *HarborRepositoryInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.HarborRepositoryLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddFeatureLifecycleFunc: method is nil but HarborRepositoryInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.HarborRepositoryLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockHarborRepositoryInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockHarborRepositoryInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddFeatureLifecycleCalls())
func (mock *HarborRepositoryInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.HarborRepositoryLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.HarborRepositoryLifecycle
	}
	lockHarborRepositoryInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockHarborRepositoryInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *HarborRepositoryInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.HarborRepositoryHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddHandlerFunc: method is nil but HarborRepositoryInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.HarborRepositoryHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockHarborRepositoryInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockHarborRepositoryInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddHandlerCalls())
func (mock *HarborRepositoryInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.HarborRepositoryHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.HarborRepositoryHandlerFunc
	}
	lockHarborRepositoryInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockHarborRepositoryInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *HarborRepositoryInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.HarborRepositoryLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("HarborRepositoryInterfaceMock.AddLifecycleFunc: method is nil but HarborRepositoryInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.HarborRepositoryLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockHarborRepositoryInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockHarborRepositoryInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedHarborRepositoryInterface.AddLifecycleCalls())
func (mock *HarborRepositoryInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.HarborRepositoryLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.HarborRepositoryLifecycle
	}
	lockHarborRepositoryInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockHarborRepositoryInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *HarborRepositoryInterfaceMock) Controller() v3.HarborRepositoryController {
	if mock.ControllerFunc == nil {
		panic("HarborRepositoryInterfaceMock.ControllerFunc: method is nil but HarborRepositoryInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockHarborRepositoryInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockHarborRepositoryInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedHarborRepositoryInterface.ControllerCalls())
func (mock *HarborRepositoryInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockHarborRepositoryInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockHarborRepositoryInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *HarborRepositoryInterfaceMock) Create(in1 *v3.HarborRepository) (*v3.HarborRepository, error) {
	if mock.CreateFunc == nil {
		panic("HarborRepositoryInterfaceMock.CreateFunc: method is nil but HarborRepositoryInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.HarborRepository
	}{
		In1: in1,
	}
	lockHarborRepositoryInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockHarborRepositoryInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedHarborRepositoryInterface.CreateCalls())
func (mock *HarborRepositoryInterfaceMock) CreateCalls() []struct {
	In1 *v3.HarborRepository
} {
	var calls []struct {
		In1 *v3.HarborRepository
	}
	lockHarborRepositoryInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockHarborRepositoryInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *HarborRepositoryInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("HarborRepositoryInterfaceMock.DeleteFunc: method is nil but HarborRepositoryInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockHarborRepositoryInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockHarborRepositoryInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedHarborRepositoryInterface.DeleteCalls())
func (mock *HarborRepositoryInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockHarborRepositoryInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockHarborRepositoryInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *HarborRepositoryInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("HarborRepositoryInterfaceMock.DeleteCollectionFunc: method is nil but HarborRepositoryInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockHarborRepositoryInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockHarborRepositoryInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedHarborRepositoryInterface.DeleteCollectionCalls())
func (mock *HarborRepositoryInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockHarborRepositoryInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockHarborRepositoryInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *HarborRepositoryInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("HarborRepositoryInterfaceMock.DeleteNamespacedFunc: method is nil but HarborRepositoryInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockHarborRepositoryInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockHarborRepositoryInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedHarborRepositoryInterface.DeleteNamespacedCalls())
func (mock *HarborRepositoryInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockHarborRepositoryInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockHarborRepositoryInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *HarborRepositoryInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.HarborRepository, error) {
	if mock.GetFunc == nil {
		panic("HarborRepositoryInterfaceMock.GetFunc: method is nil but HarborRepositoryInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockHarborRepositoryInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHarborRepositoryInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHarborRepositoryInterface.GetCalls())
func (mock *HarborRepositoryInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockHarborRepositoryInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockHarborRepositoryInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *HarborRepositoryInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.HarborRepository, error) {
	if mock.GetNamespacedFunc == nil {
		panic("HarborRepositoryInterfaceMock.GetNamespacedFunc: method is nil but HarborRepositoryInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockHarborRepositoryInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockHarborRepositoryInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedHarborRepositoryInterface.GetNamespacedCalls())
func (mock *HarborRepositoryInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockHarborRepositoryInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockHarborRepositoryInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *HarborRepositoryInterfaceMock) List(opts v1.ListOptions) (*v3.HarborRepositoryList, error) {
	if mock.ListFunc == nil {
		panic("HarborRepositoryInterfaceMock.ListFunc: method is nil but HarborRepositoryInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockHarborRepositoryInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockHarborRepositoryInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedHarborRepositoryInterface.ListCalls())
func (mock *HarborRepositoryInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockHarborRepositoryInterfaceMockList.RLock()
	calls = mock.calls.List
	lockHarborRepositoryInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *HarborRepositoryInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("HarborRepositoryInterfaceMock.ObjectClientFunc: method is nil but HarborRepositoryInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockHarborRepositoryInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockHarborRepositoryInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedHarborRepositoryInterface.ObjectClientCalls())
func (mock *HarborRepositoryInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockHarborRepositoryInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockHarborRepositoryInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *HarborRepositoryInterfaceMock) Update(in1 *v3.HarborRepository) (*v3.HarborRepository, error) {
	if mock.UpdateFunc == nil {
		panic("HarborRepositoryInterfaceMock.UpdateFunc: method is nil but HarborRepositoryInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.HarborRepository
	}{
		In1: in1,
	}
	lockHarborRepositoryInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockHarborRepositoryInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedHarborRepositoryInterface.UpdateCalls())
func (mock *HarborRepositoryInterfaceMock) UpdateCalls() []struct {
	In1 *v3.HarborRepository
} {
	var calls []struct {
		In1 *v3.HarborRepository
	}
	lockHarborRepositoryInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockHarborRepositoryInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *HarborRepositoryInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("HarborRepositoryInterfaceMock.WatchFunc: method is nil but HarborRepositoryInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockHarborRepositoryInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockHarborRepositoryInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedHarborRepositoryInterface.WatchCalls())
func (mock *HarborRepositoryInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockHarborRepositoryInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockHarborRepositoryInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockHarborRepositoriesGetterMockHarborRepositories sync.RWMutex
)

// Ensure, that HarborRepositoriesGetterMock does implement HarborRepositoriesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.HarborRepositoriesGetter = &HarborRepositoriesGetterMock{}

// HarborRepositoriesGetterMock is a mock implementation of HarborRepositoriesGetter.
//
//     func TestSomethingThatUsesHarborRepositoriesGetter(t *testing.T) {
//
//         // make and configure a mocked HarborRepositoriesGetter
//         mockedHarborRepositoriesGetter := &HarborRepositoriesGetterMock{
//             HarborRepositoriesFunc: func(namespace string) v3.HarborRepositoryInterface {
// 	               panic("mock out the HarborRepositories method")
//             },
//         }
//
//         // use mockedHarborRepositoriesGetter in code that requires HarborRepositoriesGetter
//         // and then make assertions.
//
//     }
type HarborRepositoriesGetterMock struct {
	// HarborRepositoriesFunc mocks the HarborRepositories method.
	HarborRepositoriesFunc func(namespace string) v3.HarborRepositoryInterface

	// calls tracks calls to the methods.
	calls struct {
		// HarborRepositories holds details about calls to the HarborRepositories method.
		HarborRepositories []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// HarborRepositories calls HarborRepositoriesFunc.
func (mock *HarborRepositoriesGetterMock) HarborRepositories(namespace string) v3.HarborRepositoryInterface {
	if mock.HarborRepositoriesFunc == nil {
		panic("HarborRepositoriesGetterMock.HarborRepositoriesFunc: method is nil but HarborRepositoriesGetter.HarborRepositories was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockHarborRepositoriesGetterMockHarborRepositories.Lock()
	mock.calls.HarborRepositories = append(mock.calls.HarborRepositories, callInfo)
	lockHarborRepositoriesGetterMockHarborRepositories.Unlock()
	return mock.HarborRepositoriesFunc(namespace)
}

// HarborRepositoriesCalls gets all the calls that were made to HarborRepositories.
// Check the length with:
//     len(mockedHarborRepositoriesGetter.HarborRepositoriesCalls())
func (mock *HarborRepositoriesGetterMock) HarborRepositoriesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockHarborRepositoriesGetterMockHarborRepositories.RLock()
	calls = mock.calls.HarborRepositories
	lockHarborRepositoriesGetterMockHarborRepositories.RUnlock()
	return calls
}
